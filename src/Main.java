import java.util.Random;

/* Задание
В классическом наборе домино 28 костей. Кости представляют собой прямоугольники, разделенные на 2 части,
на каждой из них отмечены точки от 0 до 6. Каждая кость уникальна. Напишите программу, используя
объектно-ориентированную методологию, которая создает объект набор домино, а затем выводит его на экран
(пара целых чисел). Далее набор преобразуется в последовательность (для каждой кости хранится местоположение
следующей за ней). Для этого из набора случайным образом выбирается кость и добавляется в конец последовательности
(исходно последовательность пустая). Для того чтобы не проходить через всю последовательность, при добавлении
очередной кости, необходимо хранить местоположения последней добавленной кости, для которой, в свою очередь,
хранится местоположение первой. После того как последовательность из 28 костей полностью сформирована, она
выводится на экран от первой кости последовательности до последней. Далее необходимо по заданному числу N (задается
в main()) последовательно исключить сначала кость N от начала последовательности, потом кость N от следующей после
исключенной и так далее пока из последовательности не будут исключены все кости. При этом каждый раз на экран
необходимо выводить на одной строке исключенную на данном шаге кость, на следующей оставшуюся после очередного
исключения последовательность от ее первой кости до последней. Если при очередном поиске исключаемой кости дошли
до конца последовательности, то поиск необходимо продолжить от начала последовательности. Используйте для хранения
набора и последовательности костей только один массив из 28 элементов. При поиске кости и выводе на экран
последовательности не должно быть посещений исключенных из последовательности костей!
*/

public class Main {
    public static void main(String[] args) {
        final int LEN = 28;  // размер набора домино
        int N = 10;  // задаем N
        DominoSet set = new DominoSet();  // создание набора
//        set.print();
        Sequence seq = new Sequence();  // создание пустой последовательности

        // генерация случайной последовательности костей без повторений

        boolean[] tempArr = new boolean[LEN];  // массив нужный, чтобы узнать занесли ли уже кость с индексом в последовательность
        int piecesLeft = LEN;  // сколько фишек осталось добавить
        int curIndex;  // здесь хранится случайное число
        Random rand = new Random();
        while (true){
            curIndex = rand.nextInt(LEN);  // случайное число от 0 до 28
            if (!tempArr[curIndex]){  // проверка не записали ли в последовательность кость под этим случаным индексом
                tempArr[curIndex] = true;  // записали кость, чтобы не добавить ее второй раз
                seq.addPiece(set.getPiece(curIndex)); // добавили кость в последовательность
                piecesLeft--;
            }
            if (piecesLeft == 0) { // заканчиваем цикл, когда все кости добавлены
                break;
            }
        }
        seq.print();
        System.out.println();

        seq.popAllN(N);
        /*for (DominoPiece i : seq.popAllN(1)){
            System.out.println(i);
        }*/
    }
}